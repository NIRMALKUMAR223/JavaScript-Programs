operator
-----------> symbol which is used to perform some task

---> arathimetic operator 
        +,-,%,/,*,++,--

---> relation operator
        >,>=,<,<=,==,===,!=,!==

---> logical operator
        &&, ||, !

---> bitwise operator
        &, |, ~

---> assignment operator
        +=, -=, *=, /=, =, 

---> ternary operator
        condition? true : false


== and !=
----> double equal is used to compare only the value not the data type

=== and !==
----> === is used to compare value as well as data type

note : 
---->  == and === both will return boolean value

operator and datatype


${} --- doller expression  backtick  ``

undefined + number = NaN
NaN = not a number (return type of NaN is number);

----> Types Of Function

----> named function.
    function function_name(){

    }

----> function expression. // conditional rendering
    lhs  =  rhs;

----> anonymous function.
    const add = function (number){

    }

----> arrow function.
    ES6 => fat arrow 
    ()=>{

    }

----> immidiate invoked function expression (IIFE).
----> higher order function.
----> callback function.

Function():

=> Function is a block of code which is used to do some specific task.
=> We can write any bussniess with in that function block.
=> To excute that function we have to triger it by calling the function using function name.
=> In javascript function are created in many ways.

    * named function.
    * function expression. // conditional rendering
    * anonymous function.
    * arrow function.
    * immidiate invoked function expression (IIFE).
    * higher order function.
    * callback function.

=>Named function.

    * To create a named function we have to function keyword along with the identifier, 
      and paranthsis for the parameter with a block {}.
    
    example:
        function print(){
            console.log('i am function');
        }
        print();

        function fullName(first, last){
            return 'hello ' + first +' '+ last;
        }
        fullName('nirmal', 'kumar');

=>Function expression. // conditional rendering

    * In javascript function can be stored in an variable.
    * Storing a function in an variable is known as function expression.

    example:
        var add = function(a,b){
            console.log(a+b);
        }

        add(10,20);

=>Anonymous function.

    * In javascript we can create anonymous function with out using identifier.
    * But we have to store that in an variable.

    example:
        var add = function(a,b){
            console.log(a+b);
        }

        add(10,20);

=>Arrow function.

    * In javascript arrow function was introduced in ES6 feature.
    * We don't have to use function keyword. 
    * We don't have to use identifier.
    * To create arrow function we have to use paranthsis for parameters along with fat (=>) arrow.
    * If there is only one parameter then paranthsis is not manitory. 
    * If there is only one statment clever {} braces is not manitory.
    * If there is only one return statment then clever braces and return keyword is not manitory. 
    * If we are using return keyword explicity the we have to clever {} braces.

    Note:

        * Arrow function should be stored in a variable.
    
    example:

        // Two parameter
            const add = (a,b) => {
                return a+b;
            }
        
        // zero parameter
            const print = () => {
                return 'welcome';
            } 
        
        // one parameter 
            const user = () => user;

=>immidiate invoked function expression (IIFE).

    * Such type of function which is called immidiately after creating it.
    * This types of function excute only for one time .
    * In order to create an IIFE we have to wrap the function inside the paranthsis and we can call that function 
      by giving another paranthsis.

    example:

        (function xyz(){
            console.log('hello world');
        })();

        (()=>{
            console.log("helloworld);
        })();

        ((name)=>{
            console.log(`my name is ${name});
        })('Nirmal Kumar);

=>higher order function.

    * Those function which accept another as its argument is known as higher order function.
    * We have to specify the perticular parameter is accepting a function by calling  it inside the function scope.
    * Higher order function return an another function.
    * It is generally used in such cases where the code is reusable .

    example:

        // 1

        var fun = (user, password, a)=>{
            user(a);
            password();
        }

        fun ( (a)=>{
            console.log(a+ ' i am user');
        }, ()=>{
            console.log('i am password')
        });
        
        // 2

        var calc = (operator, number1, number2)=>{
            operator(number1, number2);
        }

        calc((num1, num2)=>{
            console.log(num1! + num2);
        }, 10, 20);


=>callback function
    
    * The function which is passed as a parameter inside the higher order function is known as callback function.


=>Nested function
    
    * Function inside a function is known as Nested function

    example: 

    var nest = ()=>{
        console.log('i am parent function');

        var child = ()=>{
            console.log('i am child function');

            var grandChild = ()=>{
                console.log('i am grand child');
            }
            grandChild();
        }
        child();
    }

    nest();

=>Closure

    * Closure was introduced in ES6 version.
    * Closure is nothing but the temperory storage where all the data member of a function is temperory stored.
    * If the child function wants to access the data member they can access by using Closure.
    * It is function where the logic for storing the data member of the function is temperory is written.



  
///////////   first code

console.log('start')

var a = 50;
var b = 20;

function abc(){
    return a+b;
}

console.log(abc());
console.log('hello');

function first(){
    var c = a;
    console.log(c);
}

first();
console.log('end')


////////// second code

function parent(a,b){
    
    var c = 50;
    
    function child(){
        console.log(c+10);
        var d = 100;
        console.log(d+c);
    }

    var e = 200;
    
    child();
} 

parent(10, 5);
console.log('bye bye');

=>Execution context

    * Every time an javascript file is created for that js file 
    * One execution context is created that is known as global execution context 
    * For every execution context there are two phases
        ----->variable phase
        ----->execution phase
    
    * variable phase and execution phase
        
        =>In the variable phase are stored in the heap memory  with the default value undefined.
        =>In the execution phase all the variables get their values and all the executed line get executed.
        =>whenever there is a function , we need to call that function in order to execute it.
        =>whenever the function calling statment is their for that function new execution context is created along with the variable phase and execution phase.

=>Array
    
    * Array is collection of data 
    * Unlike normal variable array variable is able to store multiple data at the same time
    * In javascript arrays are heterogeneous 

    Syntax:

        => Literal way
            
            const arr = [1,2,3,4,5,6,7,8,9,10];
            const other = []; // empty array

        => Using new keyword
        
            const otherWay = new Array();
            const anotherWay = new Array(5);

        =>Adding element to an array

            arr[0] = value;
            arr[1] = value;
            arr[2] = value;
            arr[3] = value;
            arr[4] = value;

    Note:

        If we are adding less number of elements than the length of the array then it create hole in the array
        To avoid the holes in the array we have to enter data in all the indexes and more

    Fetching element in array:

        var user = [1,2,3,4,5,6,7,8,9,10];
        
        // using for loop

            for (let i = 0; i < user.length; i++ ){
                console.log(user[i]);
            }

        // using while loop

            index = 0;
            while (index < user.length){
                console.log(user[index]);
                index++;
            }

        // using forEach

            user.forEach( (item)=>{
                console.log(item)
            });

=>Array Methods
    push()
    pop()
    shift()
    unshift()
    reverse()
    split()
    slice()
    splice()
    substr()
    forEach()
    filter()
    map()
    includes()
    Every()
    Sum()


=>Slice 

    * Slice is an array Method which is used to slice or cut out a part of an array.
    * The sliced part of an array its stored in new array
    * So, slice Method return an new array without affecting original array.
    * Slice Method accept two value first starting index and the second the length of the index to be cut out.

    example:

        var arr = [10,20,30,40,50];
        var sliceArray = arr.splice(1,3);


=>Splice 

    * Splice Method is an array Method which is used to delete or add elements in th array.
    * It affect the original array.
    * Splice Method accept three argument first stating index second number of index to be affected third argument is optional
      argument which is used to add new element.

    example:

        arr.splice(3,2,'new element');


=>Every

    * Every Method is an array Method which accept an callback function as an argument.
    * That callback function accept three argument of its own first argument is the current element second argument is current index value
      third argument is current array.
    * Every Method is used to check a condition on every element and return an boolean value.
    * If every element of that array return true then every return output as true otherwise if any of the element return false 
    the every Method false.

    example:

        var arr = [1,2,3,4,5,6,7,8];
        console.log(arr.every((element, index, arr)=>{
            return element>5;
        }))
    

=>Some

    * Some is an array Method which accept an callback function as argument.
    * The callback function accept three argument of its own first argument is the current element second argument is current index value
      third argument is current array.
    * It is used to check condition on every element if any of the element return true the some Method will return output as true 
      otherwise if all the element return false then some method will return output as false.

    example:

        var arr = [1,2,3,4,5,6,7,8];
        console.log(arr.some((element, index, arr)=>{
            return element>5;
        }))


=>forEach

    * forEach is an array method which accept an callback function as its argument.
    * That callback function accept one argument of its own.
    * It iterate to every element of an array and print the value individually.

    example:
        
        const arr = [1,2,3,4,5,6,7,8,9];
        arr.forEach(ele=>console.log(ele));


=>Filter 

    * Filter method is an array method which accept callback function as it argument.
    * That callback function accept three argument of its own first current element and second current index and current array.
    * Filter method is used to filter out the array according to the condition.
    * If any element return true then that element is filter out and stored in the new array.
    * It doesn't affect the original array.
    * It return new array.

    example:

        const arr = [1,2,3,4,5,6,7,8,9];
        const newFilter = arr.Filter((element, index, arr)=>{
            return element%2==0;
        });


=>Map

    * Map method is an array method which accept callback function as it argument.
    * That callback function accept three argument of its own first current element and second current index and current array.
    * Map method is used to Map out the array according to the condition.
    * Map method iterate to every element and according to the requirement it update the element and return an updated new array.

    example:

        const arr = [1,2,3,4,5,6,7,8,9];
        const newMapedArray = arr.Map((element, index, arr)=>{
            return element + 5;
        });


=>Reduce

    * Reduce method is an array method which accept callback function as it argument.
    * That callback function accept four argument of its own first accumulator (current value) 
      and second updated value and current index and four current array.
    * Reduce method is used to intercalculate and return an single value.
    * It will iterate to every element and calculate it with the updated value.
    * Map method iterate to every element and according to the requirement it update the element and return an updated new array.
    * The current index and current array are optional.

    example:

        const arr = [1,2,3,4,5,6,7,8,9];
        const newReduceArray = arr.Reduce((accumulator, updatedValue, index, arr)=>{
            return  accumulator + updatedValue;
        });


=>Objects

    * Objects are nothing but the real time entities.
    * Objects consist of states and behaviour.
    * Objects are storing the properties in the key value pair.
    * There are different way to create Objects.
        
        => Literal way
        => Object constructor
        => Function constructor
        => Object.create()

        * Literal way

            const person = {};
            person.name = 'nirmal';
            person.age = 23;
            person.degree = 'MCA';
            console.log(person);

            const user = {
                Email:'rockerrock223@gmail.com',
                password:'qwerty@123455'
            }
        
        * Object constructor

        * Function constructor

        * Object.create()


